#! /bin/bash

##############################--- ABOUT THIS SCRIPT ---#####################################
#
#   This script is supposed to be an simple one-stop way to prepare for a dev session.
#
#   See DEPENDENCY WARNING and VERSION CONTROL WARNING below for requirements.
#
#   See PROCESS below for a step by step explanation of what this script is doing each time you run it.
#
#   Written by David Maness and Guideon Berry
#
##############################--- DEPENDENCY WARNING ---####################################
#
#   In order for this script to work, the following must be installed on your local machine:
#
#       - virtualenv    (v16.0.0 or greater)
#       - pip           (v19.1 or greater)
#       - git           (latest)
#   
#  For details on how to install virtualenv and pip, see https://github.com/bellydrum/website-template#dev-tools
#
##############################--- VERSION CONTROL WARNING ---###############################
#
#   In order for this script to work, you must have these remote repositories linked to your local repository:
#
#       - origin        (URL of your personal fork of the master repository)
#       - upstream      (URL of the master repository from which origin is forked)
#
#   Note: a Heroku remote link, while necessary for staging, is not required for this script to run.
#
###############################--- WHAT THIS SCRIPT DOES ---#################################
#
#   Step 1. configure django environment
#       - if a local virtual environment doesn't exist:
#           - create one
#       - activate local virtual environment
#       - install python dependencies into the virtual environment
#
#   Step 2. configure node environment
#       - add project node binaries to $PATH variable
#       - remove and reinstall current node requirements
#       - move node modules and package.json into lib/dependencies
#       - create new symlinks
#
#   Step 3. update local and remote repository with upstream changes
#       - run lib/scripts/update
#
#############################################################################################


# important project directories
SCRIPTS_PATH='./lib/scripts'
DEPENDENCIES_PATH='./lib/dependencies'

# dependencies
PYTHON_REQS="${DEPENDENCIES_PATH}/requirements.txt"
NODE_REQS="${DEPENDENCIES_PATH}/node_modules/.bin"

warn_user() {
    printf "\nWARNING:\nUse this script with the following command: $ source dev-start\n\n"
    exit
}

# assert file was sourced
[[ "${BASH_SOURCE[0]}" == "${0}" ]] && warn_user; printf "\nSetting up local dev environment...\n"; sleep 2;

##################################################
#####--- Step 1. configure python virtual environment
##################################################

results=( $(find */bin/activate) )
if (( ${#results[@]} )); then
    source ${SCRIPTS_PATH}/activate $results
    printf "\nUninstalling python dependencies...\n"; sleep 2;
    pip uninstall -y -r ${PYTHON_REQS};
else
    virtualenv env;
    source ${SCRIPTS_PATH}/activate env/bin/activate
fi
printf "\nInstalling python dependencies...\n"; sleep 2;
pip install -r ${PYTHON_REQS}

##################################################
#####--- Step 2. configure node environment
##################################################

export PATH=$PATH:${NODE_REQS}
printf "\nAdded ${NODE_REQS} to path:\n"
printf "${PATH}\n"

printf "\nRefreshing node modules...\n"; sleep 1
rm -rf ${DEPENDENCIES_PATH}/node_modules/*; npm --prefix ${DEPENDENCIES_PATH} install ${DEPENDENCIES_PATH}
mv node_modules/ package.json package-lock.json ${DEPENDENCIES_PATH}
ln -s lib/dependencies/node_modules/ node_modules
ln -s lib/dependencies/package.json package.json

##################################################
#####--- Step 3. propagate any upstream changes across local and remote repositories
##################################################

./${SCRIPTS_PATH}/update

printf "\nThis project is completely up to date.\n\n"
